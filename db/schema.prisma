// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum Role {
  USER
  ADMIN
}

model User {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  email          String   @unique
  hashedPassword String?
  role           Role     @default(USER)
  confirmed      Boolean  @default(false)
  active         Boolean  @default(true)

  station            Station?
  commandship        Commandship?
  alliance           Alliance?           @relation(references: [id], fields: [allianceId])
  allianceId         String?
  tokens             Token[]
  sessions           Session[]
  harvesterBuildJobs HarvesterBuildJob[]
  shipBuildJobs      ShipBuildJob[]
  fleets             Fleet[]
  notifications      Notification[]
  sentMessages       Message[]
  chats              Chat[]
}

model Session {
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

enum TokenType {
  RESET_PASSWORD
  CONFIRM_EMAIL
}

model Token {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  @@unique([hashedToken, type])
}

model Station {
  user   User   @relation(references: [id], fields: [userId])
  userId String @unique

  id                  String   @id @default(uuid())
  x                   Int
  y                   Int
  harvester           Int      @default(10)
  aluminiumPercentage Int      @default(0)
  steelPercentage     Int      @default(0)
  aluminiumHarvester  Int      @default(0)
  steelHarvester      Int      @default(0)
  plutoniumHarvester  Int      @default(0)
  aluminiumIncome     Int      @default(0)
  steelIncome         Int      @default(0)
  plutoniumIncome     Int      @default(0)
  aluminium           Int      @default(1000)
  steel               Int      @default(1000)
  plutonium           Int      @default(1000)
  updatedAt           DateTime @updatedAt

  fleets              Fleet[]        @relation("fleetsInStation")
  incomingFleets      Fleet[]        @relation("incomingFleets")
  activeResourceNodes ResourceNode[]

  @@unique([x, y])
}

enum ResourceType {
  ALUMINIUM
  STEEL
  PLUTONIUM
}

model ResourceNode {
  id   String       @id @default(uuid())
  x    Int
  y    Int
  type ResourceType

  harvestingStations Station[]

  @@unique([x, y])
}

model HarvesterBuildJob {
  user   User   @relation(references: [id], fields: [userId])
  userId String

  id       String @id @default(uuid())
  amount   Int
  timeLeft Int

  @@unique([userId, timeLeft])
}

enum ShipType {
  PIRANHA
}

model ShipBuildJob {
  user   User   @relation(references: [id], fields: [userId])
  userId String

  id       String   @id @default(uuid())
  shipType ShipType
  amount   Int
  timeLeft Int

  @@unique([userId, timeLeft, shipType])
}

enum FleetAction {
  ATTACK
  DEFEND
}

model Fleet {
  user   User   @relation(references: [id], fields: [userId])
  userId String

  id String @id @default(uuid())

  inStation     Station?     @relation(name: "fleetsInStation", references: [id], fields: [stationId])
  stationId     String?
  target        Station?     @relation(name: "incomingFleets", references: [id], fields: [targetId])
  targetId      String?
  action        FleetAction?
  baseFleet     Boolean      @default(false)
  travelTime    Int?
  remainingTime Int?
  actionTicks   Int?
  returning     Boolean?

  aluminium Int @default(0)
  steel     Int @default(0)
  plutonium Int @default(0)

  piranha    Int @default(0)
  jellyfish  Int @default(0)
  shark      Int @default(0)
  hackboat   Int @default(0)
  taifun     Int @default(0)
  blizzard   Int @default(0)
  hurricane  Int @default(0)
  tsunami    Int @default(0)
  enterprise Int @default(0)
  bermuda    Int @default(0)
  kittyhawk  Int @default(0)
  atlantis   Int @default(0)
}

enum NotificationType {
  INFO
  ALERT
}

model Notification {
  user   User   @relation(references: [id], fields: [userId])
  userId String

  id      String           @id @default(uuid())
  type    NotificationType
  title   String
  content String
}

model Commandship {
  user   User   @relation(references: [id], fields: [userId])
  userId String

  id         String @id @default(uuid())
  level      Int    @default(1)
  experience Int    @default(0)
}

model Message {
  user   User   @relation(references: [id], fields: [userId])
  userId String

  chat   Chat   @relation(references: [id], fields: [chatId])
  chatId String

  id      String @id @default(uuid())
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id   String  @id @default(uuid())
  name String?

  messages Message[]
  members  User[]
  public   Boolean

  updatedAt DateTime @updatedAt
}

model Alliance {
  id   String @id @default(uuid())
  name String

  members User[]
}
